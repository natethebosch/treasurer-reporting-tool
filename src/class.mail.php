<?php
/**
 * @Author: Nate Bosscher (c) 2015
 * @Date:   2016-04-11 09:27:18
 * @Last Modified by:   Nate Bosscher
 * @Last Modified time: 2016-04-11 17:26:17
 */

/**
 * Provides mail and mail linking services for the app.
 *
 * Urls can be decoded to MailIntent's to provide routing
 */
class Mail{
	const MAIL_URL_BASE = "/mail-link?";

	static function setMailerParams(PHPMailer $mail){
		$mail->isSMTP();                                      // Set mailer to use SMTP
		$mail->Host = SMTP_HOST;  							  // Specify main and backup SMTP servers
		$mail->SMTPAuth = true;                               // Enable SMTP authentication
		$mail->Username = SMTP_USER;                 		  // SMTP username
		$mail->Password = SMTP_PWD;                           // SMTP password
		$mail->SMTPSecure = 'ssl';                            // Enable TLS encryption, `ssl` also accepted
		$mail->Port = 465;                                    // TCP port to connect to
	}

	/**
	 * sends email with download access link to treasurer
	 * @return [type] [description]
	 */
	static function emailTreasurerAccessLink(){
		$link = self::getTreasurerDownloadLink();

		// will set $subject, $html and $text for the content of the email
		include __dir__ . "/mail-tmpl/treasurer-locked.php";

		$mail = new PHPMailer;
		$mail->setAddress(Config::getTreasurerEmail());
		
		$mail->isHTML(true);

		$mail->Subject = $subject;
		$mail->Body = $html;
		$mail->AltBody = $text;

		if(!$mail->Send()){
			throw new Exception($mail->ErrorInfo, Exceptions::MAIL_FAILED);
		}
	}

	/**
	 * emails the treasurer a link to view the receipt and a link to download all receipts
	 * @param  Receipt $receipt [description]
	 * @return [type]           [description]
	 */
	static function notifyTreasurer(Receipt $receipt){
		$link = self::getTreasurerDownloadLink();

		// will set $subject, $html and $text for the content of the email
		include __dir__ . "/mail-tmpl/treasurer.php";

		$mail = new PHPMailer;

		self::setMailerParams($mail);

		$mail->addAddress(Config::getTreasurerEmail());

		foreach($receipt->getFiles() as $v)
			$mail->addAttachment($v);
		
		$mail->isHTML(true);

		$mail->Subject = $subject;
		$mail->Body = $html;
		$mail->AltBody = $text;

		if(!$mail->Send()){
			throw new Exception($mail->ErrorInfo, Exceptions::MAIL_FAILED);
		}
	}

	/**
	 * emails the appropriate committee member as determined by the receipt and
	 * includes a link to confirm and a link to deny the receipt
	 * @param  Receipt $receipt [description]
	 * @return [type]           [description]
	 */
	static function notifyCommittee(Receipt $receipt){
		$links = self::generateReceiptReviewLinks($receipt);

		$to = Config::getCommitteeEmailForName($receipt->committee);

		// will set $subject, $html and $text for the content of the email
		include __dir__ . "/mail-tmpl/committee.php";

		$mail = new PHPMailer;
		self::setMailerParams($mail);
		$mail->addAddress($to, $receipt->committee);

		foreach($receipt->getFiles() as $v)
			$mail->addAttachment($v);

		$mail->isHTML(true);

		$mail->Subject = $subject;
		$mail->Body = $html;
		$mail->AltBody = $text;

		if(!$mail->Send()){
			throw new Exception($mail->ErrorInfo, Exceptions::MAIL_FAILED);
		}
	}

	/**
	 * receives links generated by getTreasurerDownloadLink and getTreasurerReviewLink and generateReceiptReviewLink
	 * @param  [type] $get [description]
	 * @return [type]      [description]
	 */
	static function decodeMailLink($getParams){
		if(!array_key_exists('action', $getParams))
			throw new Exception(json_encode($getParams), Exceptions::INVALID_MAIL_LINK);

		switch($getParams['action']){
			case MailLinkType::TRES_DL_ALL:

				// authenticator may throw admin-outdated or admin-failed exception
				Authenticator::validateAdminCode($getParams['auth']);
				return new MailLinkIntent($getParams['action'], null, null);

			case MailLinkType::COMM_CONFIRM:
			case MailLinkType::COMM_DENY:
				
				// authenicator may throw an code-not-found exception
				$id = Authenticator::redeemCode($getParams['auth']);

				return new MailLinkIntent($getParams['action'], $id, $getParams['auth']);

			default:
				throw new Exception(json_encode($getParams), Exceptions::INVALID_MAIL_LINK);
		}
	}

	private static function getTreasurerDownloadLink(){
		return URL_ROOT . self::MAIL_URL_BASE . http_build_query(array(
			"action" => MailLinkType::TRES_DL_ALL,
			"auth" => Authenticator::getAdminCode()
		));
	}

	private static function generateReceiptReviewLinks(Receipt $receipt){
		return array(
			"confirm" => URL_ROOT . self::MAIL_URL_BASE . http_build_query(array(
					"action" => MailLinkType::COMM_CONFIRM,
					"auth" => Authenticator::generateCode($receipt)
				)),
			"deny" => URL_ROOT . self::MAIL_URL_BASE . http_build_query(array(
					"action" => MailLinkType::COMM_DENY,
					"auth" => Authenticator::generateCode($receipt)
				)),
		);
	}
}